embed 
<drac2>
text = f''' -footer "{ctx.prefix}{ctx.alias} 'Weapon Name' | Adalbär#3333"'''
A = argparse(&ARGS&)
c = combat()
target = A.last("t") if "t" in A else name 
C = character()
if c:
	if A.get('t'):
		C = c.get_combatant(target)
	elif not A.get('t') and not c.me:
		C = character()
	else:
		C = c.me

g = load_json(get_gvar('1cd661c5-88ba-424c-ac9b-1ec7784b2580'))
g['weapons'] += load_json(get_svar("homebrewWeapon", "[]")) 
weaponName = A.last('weapon', A.last('w', A.last('equip', A.last('e')))) if A else '&1&'
customName = A.last('name')
bonus = ("+ "+A.join('b', '+', '') if A.get('b') else '')
magicalBonus = ("+ "+A.join('mb', '+', '') if A.get('mb') else '')
additionalDamage = ("+ "+A.join('d', '+', '') if A.get('d') else '')
N = '\n'
# Grabs Weapon + returns 'None' if nothing matches.
ReqWeapon = A.last("equip", A.last("e")) if "equip" in A or "e" in A else '&1&'
ReqMetal = A.last('m', A.last('metal')) if "m" in A or "metal" in A else ""
chosenWeapon = None
for weapon in g.weapons:
	if ReqWeapon and ReqWeapon.lower() in weapon.name.lower():
		chosenWeapon = weapon
		break
chosenMetal = ""
for metal in g['metals']:
    if ReqMetal and ReqMetal.lower() in metal.lower():
        chosenMetal = metal
        break
metalDesc = g['metalsWeaponDesc'][chosenMetal] if chosenMetal else ''
chosenMetalText = f'**{chosenMetal} {chosenWeapon.get("name")}:** {metalDesc}' if chosenMetal else ""
if not chosenWeapon:
	text += f''' -title "@{ctx.author} forgot the weapons name!" -desc "Sorry, but you forgot to name the weapon. The weapons's listed in the PHB can be equipped here. Just in case, here's the chart. 
Decide which you want to equip via `{ctx.prefix}{ctx.alias} 'Weapon Name' <args>`"'''
	return text 
### Setting Proficiency 
FC = f"{[i for i in C.levels][0][0]}"
SC = list(C.levels)
# Obtaining Proficiencies Based Off Class
classProfs = g.get('classWeaponProfs')
MainCWPro = classProfs.get(str(FC), "")
# Obtaining Bonus Proficiencies from Multiclassing 
multiClassProfs = g.get('multiClassWeaponProfs')
MultiCWPro = multiClassProfs.get(str(SC), "")
# Obtaining Other Proficiencies from the cvar 'subclass'
subclassProfs = g.get('subclassWeaponProfs')
SubCWPro = subclassProfs.get(get("subclasses"), "")
ALLPro = ' '.join({i:1 for i in MainCWPro+MultiCWPro+SubCWPro}.keys())
# Sets Ability Mod
vowls = "an" if "aeiou" in chosenWeapon else "a"
proficiencyBonusText = f''' -f "It is not Important~~~"'''

if chosenWeapon.get('finesse'):
	abilityBonus = max(C.stats.get_mod('dexterity'), C.stats.get_mod('strength'))
if not chosenWeapon.get('finesse'):
	abilityBonus = C.stats.get_mod('dexterity') if chosenWeapon.get('type') == "Ranged" else C.stats.get_mod('strength')
# Sets Proficiency Bonus
proficency = True if chosenWeapon.get('name') in ALLPro or chosenWeapon.get('prof') in ALLPro else False
if A.last('i') or A.get('pro'):
	proficiencyBonus = C.stats.prof_bonus
	proficiencyBonusText = f'''{target} is treated as proficient with this {chosenWeapon.get('name')}.'''
elif proficency:
	proficencyBonus = C.stats.prof_bonus
	proficiencyBonusText = f'''{target} is proficient with {vowls} {chosenWeapon.get('name')}.'''
elif not proficency:
	proficiencyBonus = 0
	proficiencyBonusText = f'''{target} does not have proficiency with {vowls} {chosenWeapon.get('name')}.'''
else:
	proficiencyBonus = 0
	proficiencyBonusText = f'''{target} does not have proficiency with {vowls} {chosenWeapon.get('name')}.'''

# Align Specific texts
itemName = f'''{'Magical ' if magicalBonus else ''} {f"""{magicalBonus.replace(' ','')} """ if magicalBonus else ''}{chosenMetal} {chosenWeapon.get('name')}{' (Two-Handed)' if A.get('versatile', A.get('vers')) else ''}'''
itemName = A.last('name') if A.get('name') else itemName
damageDice = chosenWeapon.get('THDice') if A.get('versatile', A.get('vers')) and chosenWeapon.get('THDice') else chosenWeapon.get('dice')
damageType = chosenWeapon.get('damage')
weaponType = chosenWeapon.get('type')
weaponDesc = chosenWeapon.get('desc')
addEffect =f'''{proficiencyBonus+abilityBonus} {bonus} {magicalBonus}|{damageDice} + {abilityBonus} {magicalBonus} [{"magical " if magicalBonus else ""}{'silvered ' if chosenMetal == 'Silver' else ''}{damageType}] {additionalDamage}|{weaponType}, {weaponDesc}'''
text += f''' -title "{target} equips {vowls} {itemName}!" -desc "{target} is now wielding {vowls} {itemName}! {target} can now make attacks with said weapon!" -f "Proficiency|{proficiencyBonusText}" -f "{'Magical ' if magicalBonus else ''}{f"""{magicalBonus.replace(' ','')} """ if magicalBonus else ''}{chosenWeapon.get('name')} Details|**To Hit**: +{proficiencyBonus+abilityBonus} {bonus} {magicalBonus} {N}**Damage**: {damageDice} + {abilityBonus} {magicalBonus} [{'magical ' if bonus else ''}{'silvered ' if chosenMetal == 'Silver' else ''}{damageType}] {additionalDamage} {N}{weaponType}, {weaponDesc}{f', {chosenMetalText}' if chosenMetal else ''}."'''
if c and C != character(): 
	if C.get_effect(chosenWeapon.get('name')):
		text += f''' -f "Was not Equipped|{target} already has {vowls} {chosenWeapon.get('name')} equipped." -footer "!equip 'Weapon Name' | Adalbär#3333"'''
	else:
		C.add_effect(itemName, f"""-attack "{addEffect}" """, desc=f'''{weaponDesc}''')
		text += f''' -footer "Equipped to {target}"'''
return text 
</drac2>